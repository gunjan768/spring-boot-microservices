# Remember that the external property (or yml) file name should match with app name to get the properties from that external property
# file. To get the location of external file see spring_cloud_config_server microservice (see it's application.properties)
spring.application.name=limits-service

# URL where Config Server is running. Connecting to Config Server is optional as we have added 'optional'.
spring.config.import=optional:configserver:http://localhost:8888

# Limits (Limits is user created class) Service
limits-service.minimum=2
limits-service.maximum=998
limits-service.average=500

# Which profile (application.ext file) you want to pick up based on current environment. If we want the properties for the development
# environment we can use "dev" and SB will pick the configuration from "appName-dev.extension". Here from "limits-service-dev.properties".
# You can write any name for environment but we generally use shorthand name like for development: dev, production: prod etc. Default
# profile has no name: "appName.extension"
spring.profiles.active=dev

# We can configure configuration related properties using spring.cloud prefix. "spring.cloud.config.profile" will change the file active
# profile from whatever is mentioned in "spring.profiles.active" to "spring.cloud.config.profile". Here active profile will be changed
# from "dev" to "qa" (default profile is always active). In other words, above profile (dev) will be overwritten by this one (qa).
spring.cloud.config.profile=qa

# We can even avoid using appName for the configuration name i.e. you can have different appName and different configuration file name.
# If spring.cloud.config.name=any_name then property file will be named "any_name.extension" for example say spring.cloud.config.name=emilia
# application file = "emilia.properties" (.yml)
#spring.cloud.config.name=